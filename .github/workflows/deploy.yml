name: CI/CD with Git Actions & Docker Hub test

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      TARGET_BRANCH: ${{ github.base_ref }}
      SPRING_PROFILE: ${{ github.base_ref == 'main' && 'prod' || 'dev' }}
      PRIVATE_IP: ${{ github.base_ref == 'main' && secrets.PRIVATE_IP || secrets.DEV_PRIVATE_IP }}
      REPOSITORY: ${{ github.base_ref == 'main' && secrets.DOCKERHUB_REPOSITORY || secrets.DEV_DOCKERHUB_REPOSITORY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean :bootJar

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg SPRING_PROFILE=${{ env.SPRING_PROFILE }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY }}:${{ secrets.DOCKERHUB_TAG }} \
            --platform linux/amd64 .

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY }}:${{ secrets.DOCKERHUB_TAG }}

#      - name: Build and push Spring Boot app Docker image
#        run: |
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ secrets.DOCKERHUB_TAG }} --platform linux/amd64 .
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ secrets.DOCKERHUB_TAG }}

      - name: Deploy at EC2 instance through Bastion Host
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BASTION_SSH_HOST }}  # Bastion Host ÌçºÎ∏îÎ¶≠ IP
          username: ubuntu
          key: ${{ secrets.BASTION_SSH_KEY }}
          port: ${{ secrets.BASTION_SSH_PORT }}
          script: |
            echo "‚úÖ Bastion Host Ï†ëÏÜç ÏôÑÎ£å"

            # Private EC2Ïóê SSH Ï†ëÏÜç ÌõÑ Î∞∞Ìè¨ ÏàòÌñâ
            ssh -i "${{secrets.DIRECTORY_PEM}}" ubuntu@${{ env.PRIVATE_IP }} << 'EOF'
              echo "‚úÖ Private EC2 Ï†ëÏÜç ÏôÑÎ£å"

              IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY }}:${{ secrets.DOCKERHUB_TAG }}"
              CONTAINER_NAME="${{ secrets.DOCKERHUB_TAG }}"

              echo "üîπ Docker Î°úÍ∑∏Ïù∏"
              docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"

              echo "üîπ Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà($CONTAINER_NAME) Ï§ëÏßÄ Î∞è ÏÇ≠Ï†ú"
              if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
                sudo docker stop "$CONTAINER_NAME"
                sudo docker rm "$CONTAINER_NAME"
              else
                echo "‚ÑπÔ∏è $CONTAINER_NAME Ïª®ÌÖåÏù¥ÎÑàÍ∞Ä Ïã§Ìñâ Ï§ëÏù¥ÏßÄ ÏïäÏùå"
              fi

              echo "üîπ Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ($IMAGE_NAME) ÏÇ≠Ï†ú"
              if [ "$(sudo docker images -q $IMAGE_NAME)" ]; then
                sudo docker rmi "$IMAGE_NAME"
              else
                echo "‚ÑπÔ∏è ÏÇ≠Ï†úÌï† Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå: $IMAGE_NAME"
              fi

              echo "üîπ ÏÉàÎ°úÏö¥ Docker Ïù¥ÎØ∏ÏßÄ Pull"
              sudo docker pull "$IMAGE_NAME"

              echo "üîπ Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ"
              sudo docker run -d --name "$CONTAINER_NAME" --network=drinkly -e SERVER_PORT=0 "$IMAGE_NAME"

              echo "üöÄ Î∞∞Ìè¨ ÏôÑÎ£å"
            EOF
